#1st part set the network
- name: network setup
  hosts: loadbalancer
  become: True
  gather_facts: True
  tasks:
        - shell: echo '1' > /proc/sys/net/ipv4/ip_forward
        - ansible.builtin.iptables:
            table: nat
            chain: POSTROUTING
            out_interface: eth0
            jump: MASQUERADE 
            
- name: set default gateway on hosts
  hosts: servers
  become: True
  vars:
   - ipaddr: 192.168.1.9
  tasks:
  	- command: "route add default gw {{ ipaddr }}"


#- name: docker setup
#  hosts: all
#  become: True
#  tasks:
# 	- name: downloading docker installation shell script
# 	  uri:
#           url: https://test.docker.com 
#           #curl -fsSL https://get.docker.com -o get-docker.sh
#           dest: get-docker.sh
#          
#      	- name: docker installation
#      	  command: "sh get-docker.sh"
#2nd docker installation
- name: docker setup
  hosts: all
  become: True
  tasks:
        - name: downloading docker installation shell script
          command: curl -fsSL https://get.docker.com -o get-docker.sh
        - name: docker installation
          command: "sh get-docker.sh"
        - command: "systemctl start docker"
        - yum: 
            name: epel-release

        - name: installing pip
          yum: 
            name: python-pip

        - name: installing the needed script
          pip: 
            name: docker


#3rd setup NFS server      	  
- name: setup NFS server
  hosts: nfs_server
  become: yes
  tasks:
#you can add a new partition if necessary    
#    - name: Create a new ext4 primary partition
#      community.general.parted:
#        device: /dev/vdb
#        number: 1
#        state: present
#        fs_type: ext4
	    
    - name: install nfs-utils
      yum: name=nfs-utils state=latest

    - name: enable rpcbind nfslock nfs
      service:
        name: "{{ item }}"
        enabled: yes
      with_items:
        - rpcbind
        - nfslock
        - nfs

    - name: Create a mountable directory if it does not exist
      file:
        path: /mnt/web_storage
        state: directory
        owner: centos
        group: centos
        mode: '0775'
        
    - name: Copy exports file.
      template:
        src: ./exports.j2
        dest: /etc/exports
        owner: root
        group: root
        mode: 0644
        
    - name: NFS apply change configrue
      shell: systemctl reload nfs;exportfs -a;systemctl start nfs
 
 #4th NFS client configuration     
- name: setup NFS client
  hosts: nfs_client
  become: yes
  vars:
    - nfs_server: 192.168.1.13
  tasks:     
    - name: install nfs-utils
      yum: name=nfs-utils state=latest

    - name: Create a mountable directory if it does not exist
      file:
        path: /mnt/web_storage
        state: directory
        owner: centos
        group: centos
        mode: '0775'

        
    - name: Mount volume
      shell: sudo mount {{ nfs_server }}:/mnt/web_storage /mnt/web_storage
        
#5th running the swarm 
   
- name: setting up swarm
  hosts: all
  become: True
  gather_facts: True
  vars:
    - manager_ip: 192.168.10.9
  tasks:
    
    - name: Init a new swarm with default parameters
      docker_swarm:
        state: present
        advertise_addr: "{{ manager_ip }}:2377"
      register: result
      ignore_errors: true
      when:
          - inventory_hostname == 'localhost'
    - set_fact: token={{ result.swarm_facts.JoinTokens.Worker }}
      when:
          - inventory_hostname == 'localhost'

    - name: testing if we catch the correct join token
      debug: msg={{ hostvars['localhost']['token'] }}

    - name: Add nodes
      docker_swarm:
        state: join
        advertise_addr: "{{ inventory_hostname }}"
        join_token: "{{ hostvars['localhost']['token'] }}" 
        remote_addrs: [ '{{ manager_ip }}:2377' ]
      when: 
          - inventory_hostname != 'localhost'
      ignore_errors: true


#6th node labling we must put true in quotation or otherwise it is supposed as a boolean and won't work

- name: setting up swarm
  hosts: master
  become: True
  gather_facts: True
  tasks:
      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: server1.novalocal
          labels: 
                database: "true"
      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: server1.novalocal
          labels:
                 wordpress: "true"


      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: server3.novalocal
          labels:
                 blog: "true"

      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: server4.novalocal
          labels:
                 mag: "true"
      
      - name: Merge node labels and new labels
        community.docker.docker_node:
          hostname: dispatcher.novalocal
          labels: 
                dispatcher: "true"

      
#7th deploying the stack
- name: stack deployment
  hosts: master
  become: True
  gather_facts: True
  tasks:
#copy the necessary files for deployment if needed
#    - name: Copy file with owner and permissions
#      ansible.builtin.copy:
#        src: docker-compose.yml
#        dest: /docker-compose.yml

#    - name: Copy db_password
#      ansible.builtin.copy:
#        src: db_password.txt
#        dest: /db_password.txt

#     - name: Copy db_root_password
#       ansible.builtin.copy:
#        src: db_root_password.txt
#        dest: /db_root_password.txt
    
    - name: Deploy stack from a compose file
      community.docker.docker_stack:
        state: present
        name: mystack
        compose:
          - /docker-compose.yml
          
#8th copy the backup shell script and run a cron job
- name: Run a cron job for database backup
  hosts: server1
  become: True
  gather_facts: True
  tasks:
    - name: Create database backup directory if it does not exist
      file:
	path: /home/backups
	state: directory
	owner: centos
	group: centos
	mode: '0775'
	    
    - name: Copy the shell script
      ansible.builtin.copy:
	 src: db-backup.sh
	 dest: /db-backup.sh
	 mode: '655'
  	
    - name: run a backup at 1:00 AM . Creates an entry like "0 1 * * ./db-backup.sh"
      ansible.builtin.cron:
	 name: "database backup"
	 minute: "0"
	 hour: "1"
	 job: "/db-backup.sh"



